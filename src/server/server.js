import Hapi from '@hapi/hapi';
import { config } from '../config/index.js';
import { configureAuth } from '../plugins/authStrategy.js';
import authRoutes from '../routes/authRoutes.js';
import sequelize from '../config/database.js';
import sneakerRoutes from '../routes/sneakerRoutes.js';
import adminRoutes from '../routes/adminRoutes.js';
import Jwt from '@hapi/jwt';
import Inert from '@hapi/inert';
import RateLimit from 'hapi-rate-limit';
import { tokenBlacklist } from '../helpers/jwt/jwt-gen-token.js';
import Vision from '@hapi/vision';
import HapiSwagger from 'hapi-swagger';
import userRoutes from '../routes/userRoutes.js';
import verificationRoutes from '../routes/verificationRoutes.js';

const swaggerOptions = {
  info: {
    title: 'My API Docs',
    version: '1.1.0',
    description: 'v1 API documentation for Rare Piece API + Admin Portal @ generated by hapi-swagger'
  },
  // If you need OAS3 or security, see notes below
  grouping: 'tags',
  // tagGroups: [
  //   { name: 'API', tags: ['api'] },
  //   { name: 'API v1', tags: ['v1'] }
  // ]
};
const allRoutes = [...authRoutes, ...sneakerRoutes, ...adminRoutes, ...userRoutes, ...verificationRoutes];

const init = async () => {
  const server = Hapi.server({
    port: config.server.port,
    host: config.server.host,
    routes: {
      cors: {
        origin: ['http://localhost:4200'], // Allow only your Angular frontend
        credentials: true, // Allow cookies and authentication headers
        headers: ['Accept', 'Content-Type', 'Authorization'], // Allowed headers
        exposedHeaders: ['Authorization'], // Headers accessible to the client
      }
    }
  });

  try {
    await sequelize.authenticate();
    console.log('MySQL connection has been established successfully.');
    await sequelize.sync();  // Sync the models to the database
    console.log('Database synced.');
  } catch (error) {
    console.error('Unable to connect to the database:', error);
  }

  // Register plugins
  await server.register(
    [ Jwt, RateLimit, Inert, Vision,
      {
        plugin: HapiSwagger,
        options: swaggerOptions
      }
    ]
  );
  // Define JWT authentication strategy
  server.auth.strategy('jwt', 'jwt', {
    keys: config.auth.jwt.secret,
    verify: {
      aud: false,
      iss: false,
      sub: false,
      maxAgeSec: 86400, // 24 hours
    },
    validate: async (artifacts, request, h) => {
      if (tokenBlacklist.has(artifacts.token)) {
        return { isValid: false };
      }
      return { isValid: true, credentials: { userId: artifacts.decoded.payload.id } };
    },
  });

  // Set JWT as the default authentication method
  server.auth.default('jwt');

  // Register auth strategy
  //await configureAuth(server);

  // Register all routes
  const prefixed = allRoutes.map((r) => {
    // Avoid double-prefixing if some routes are already under /api
    const path = r.path.startsWith('/api') ? r.path : `/api/v1${r.path.startsWith('/') ? '' : '/'}${r.path}`;
    return { ...r, path };
  });
  server.route(prefixed);

  await server.start();
  console.log(`Server running on ${server.info.uri}`);
  
};

process.on('unhandledRejection', (err) => {
  console.log(err);
  process.exit(1);
});

init();